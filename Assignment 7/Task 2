import java.util.concurrent.*;

public class ThreadPoolExecutorDemo {
    public static void main(String[] args) throws InterruptedException {
        ThreadPoolExecutor executor = new ThreadPoolExecutor(
            2, 4, 60L, TimeUnit.SECONDS, new LinkedBlockingQueue<>());

        for (int i = 0; i < 6; i++) {
            executor.submit(() -> {
                System.out.println("Running in thread: " + Thread.currentThread().getName());
                try { Thread.sleep(2000); } catch (InterruptedException ignored) {}
            });
            System.out.println("After submitting task " + (i+1) + ", pool size: " + executor.getPoolSize());
        }

        while (executor.getActiveCount() > 0) {
            System.out.println("Active threads: " + executor.getActiveCount());
            Thread.sleep(500);
        }

        executor.shutdown();
        executor.awaitTermination(5, TimeUnit.SECONDS);

        System.out.println("Observation: New threads are created after core threads are busy and tasks exceed corePoolSize.");
    }
}
