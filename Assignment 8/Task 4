import java.util.concurrent.*;

public class RaceDemo {
    public static void main(String[] args) throws InterruptedException {
        CountDownLatch latch = new CountDownLatch(4);
        ExecutorService executor = Executors.newFixedThreadPool(5);

        // Race Organizer
        executor.submit(() -> {
            System.out.println("Race started! Waiting for all runners...");
            try {
                latch.await();
                System.out.println("ALL RUNNERS FINISHED! Race complete!");
            } catch (InterruptedException e) {
                System.out.println("Organizer interrupted!");
            }
        });

        // Runners
        for (int i = 1; i <= 4; i++) {
            final int runnerId = i;
            executor.submit(() -> {
                try {
                    System.out.println("Runner " + runnerId + " running...");
                    long runTime = (long)(Math.random() * 3000 + 1000);
                    Thread.sleep(runTime);
                    System.out.println("Runner " + runnerId + " FINISHED! (Remaining: " + (latch.getCount() - 1) + ")");
                    latch.countDown();
                } catch (InterruptedException e) {
                    System.out.println("Runner " + runnerId + " interrupted!");
                }
            });
            Thread.sleep(200); // 200ms delay between runners
        }

        executor.shutdown();
        executor.awaitTermination(10, TimeUnit.SECONDS);
    }
}
