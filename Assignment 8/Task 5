import java.util.concurrent.*;

public class CyclicBarrierGameDemo {
    public static void main(String[] args) throws InterruptedException {
        CyclicBarrier barrier = new CyclicBarrier(3, 
            () -> System.out.println("ALL PLAYERS READY! Game starting..."));
        ExecutorService executor = Executors.newFixedThreadPool(3);

        for (int i = 1; i <= 3; i++) {
            final int playerId = i;
            executor.submit(() -> {
                try {
                    // Round 1 loading
                    System.out.println("Player " + playerId + " loading game...");
                    Thread.sleep((long)(Math.random() * 2000 + 1000));
                    System.out.println("Player " + playerId + " LOADED, waiting for others...");
                    barrier.await();

                    // Round 1 playing
                    System.out.println("Player " + playerId + " playing Round 1");
                    Thread.sleep(1500);
                    System.out.println("Player " + playerId + " finished Round 1, waiting...");
                    barrier.await();

                    // Round 2
                    System.out.println("Player " + playerId + " playing Round 2");
                    Thread.sleep(1000);
                    System.out.println("Player " + playerId + " completed!");
                } catch (InterruptedException | BrokenBarrierException e) {
                    System.out.println("Player " + playerId + " interrupted/error!");
                }
            });
            Thread.sleep(300); // 300ms delay between players
        }

        executor.shutdown();
        executor.awaitTermination(10, TimeUnit.SECONDS);
    }
}
